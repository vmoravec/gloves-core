#!/usr/bin/env ruby

GLOVES_CORE = 'gloves-core'
require 'gli'
require GLOVES_CORE

include GLI::App

GLOVES_SPEC = Gem::Specification.find_by_name GLOVES_CORE
GLOVES_MODULE_PREFIX = /(gloves-(?!core).\S+)/

program_desc GLOVES_SPEC.description

version Gloves::Core::VERSION

gloves_modules = Gem::Specification.select {|gem| gem.name =~ GLOVES_MODULE_PREFIX }

gloves_modules.each do |glove|
  desc glove.summary
  long_desc glove.description
  glove.executables.each do |bin_file|
    command bin_file.split('-').last do |c|
      c.action do
        load "#{glove.bin_dir}/#{bin_file}"
      end
    end
  end
end

desc 'List currently available gloves'
command :current do |current|
  current.default_command :help
  current.action do |global,options,args|
    puts "Currently available gloves are:\n"
    puts "   None" and return if gloves_modules.size == 0
    gloves_modules.each do |glove|
      long_desc glove.description
      glove.executables.each do |bin_file|
        puts ' '*3 + bin_file.split('-').last + ' - ' + glove.summary
      end
    end
  end
end

desc 'List all available gloves'
command :all do |all|
  all.default_command :current
  all.action do |global,options,args|
    puts "All available gloves:\n"
    gloves_modules.each do |glove|
      glove.executables.each do |bin_file|
        puts ' '*3 + bin_file.split('-').last +
             ' - ' + 'Country configuration'  +
             '  - ' +  "[#{bin_file}]" + '  -  installed'
      end
    end
    puts "   timezone - Timezone configuration - [gloves-timezone]"
    puts "   language - Language configuration - [gloves-langauge]"
    puts "   keyboard - Keyboard configuration - [gloves-keyboard]"
    puts "   firewall - Firewall configuration - [gloves-firewall]"
    puts "   ftp      - FTP configuration      - [gloves-ftp]"
    puts "   sound    - Sound configuration    - [gloves-sound]"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
